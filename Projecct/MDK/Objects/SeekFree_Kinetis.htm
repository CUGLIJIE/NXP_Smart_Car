<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SeekFree_Kinetis.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SeekFree_Kinetis.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Mon Mar 12 21:26:07 2018
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d5]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[11]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SysTick_Handler</a><BR>
 <LI><a href="#[4c]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4c]">ADC0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4d]">ADC1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[31]">CAN0_Bus_Off_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[32]">CAN0_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[30]">CAN0_ORed_Message_buffer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[34]">CAN0_Rx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[33]">CAN0_Tx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[35]">CAN0_Wake_Up_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[39]">CAN1_Bus_Off_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3a]">CAN1_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[38]">CAN1_ORed_Message_buffer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3c]">CAN1_Rx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3b]">CAN1_Tx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3d]">CAN1_Wake_Up_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4e]">CMP0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4f]">CMP1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[50]">CMP2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[54]">CMT_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[64]">DAC0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[65]">DAC1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[13]">DMA0_IRQHandler</a> from isr.o(i.DMA0_IRQHandler) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1d]">DMA10_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1e]">DMA11_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1f]">DMA12_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[20]">DMA13_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[21]">DMA14_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[22]">DMA15_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[14]">DMA1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[15]">DMA2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[16]">DMA3_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[17]">DMA4_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[18]">DMA5_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[19]">DMA6_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1a]">DMA7_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1b]">DMA8_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1c]">DMA9_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[23]">DMA_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[7b]">DefaultISR</a> from startup_mk60d10.o(.text) referenced 136 times from startup_mk60d10.o(RESET)
 <LI><a href="#[5e]">ENET_1588_Timer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[61]">ENET_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[60]">ENET_Receive_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5f]">ENET_Transmit_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[25]">FTFL_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[51]">FTM0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[52]">FTM1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[53]">FTM2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2b]">I2C0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2c]">I2C1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[37]">I2S0_Rx_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[36]">I2S0_Tx_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[28]">LLW_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[68]">LPTimer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[27]">LVD_LVW_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[67]">MCG_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[24]">MCM_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from system_mk60.o(i.NMI_Handler) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5b]">PDB0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[57]">PIT0_IRQHandler</a> from isr.o(i.PIT0_IRQHandler) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[58]">PIT1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[59]">PIT2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5a]">PIT3_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6a]">PORTA_IRQHandler</a> from isr.o(i.PORTA_IRQHandler) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6b]">PORTB_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6c]">PORTC_IRQHandler</a> from isr.o(i.PORTC_IRQHandler) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6d]">PORTD_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6e]">PORTE_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2a]">RNG_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[55]">RTC_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[56]">RTC_Seconds_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[26]">Read_Collision_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[69]">Reserved102_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6f]">Reserved108_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[70]">Reserved109_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[72]">Reserved111_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[73]">Reserved112_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[74]">Reserved113_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[75]">Reserved114_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[76]">Reserved115_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[77]">Reserved116_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[78]">Reserved117_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[79]">Reserved118_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[7a]">Reserved119_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3e]">Reserved59_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[62]">Reserved95_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[63]">SDHC_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[71]">SWI_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[7c]">Start</a> from system_mk60.o(i.Start) referenced from startup_mk60d10.o(.text)
 <LI><a href="#[12]">SysTick_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[66]">TSI0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[41]">UART0_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3f]">UART0_LON_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[40]">UART0_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[43]">UART1_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[42]">UART1_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[45]">UART2_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[44]">UART2_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[47]">UART3_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[46]">UART3_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[49]">UART4_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[48]">UART4_RX_TX_IRQHandler</a> from isr.o(i.UART4_RX_TX_IRQHandler) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4b]">UART5_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4a]">UART5_RX_TX_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5c]">USB0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5d]">USBDCD_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[29]">Watchdog_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[81]">__main</a> from __main.o(!!!main) referenced from startup_mk60d10.o(.text)
 <LI><a href="#[80]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[7f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[7e]">_sputc</a> from _sputc.o(.text) referenced from vsprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[81]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[82]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[84]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[166]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[167]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[85]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[168]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[86]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[c7]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[88]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[8a]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8c]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8d]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8e]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[169]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[90]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[92]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[93]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[94]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[96]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[98]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[9a]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[9b]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[9c]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[9e]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[16a]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[a0]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a2]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[a4]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a6]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[16b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[16c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[16e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[170]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[171]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[172]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[173]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[174]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[175]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[176]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[177]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[178]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[179]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[180]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[181]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[182]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[183]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[184]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[83]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[188]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ad]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[af]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[189]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b1]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ImgProc &rArr; Summarycontrol &rArr; get_rode_type &rArr; IslandfristEntrancejudge &rArr; IslandfristEntranceRec &rArr; OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d6]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b4]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[18b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b6]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FTFL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PIT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>PIT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>Reserved102_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>Reserved108_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>Reserved109_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>Reserved111_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>Reserved112_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>Reserved113_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>Reserved114_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>Reserved116_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>Reserved117_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>Reserved118_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>Reserved119_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>Reserved95_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SDHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART0_LON_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART5_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART5_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Watchdog_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mk60d10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b8]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDPrintf
</UL>

<P><STRONG><a name="[18c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[bc]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[bd]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[be]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ba]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[91]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[87]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[b9]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[7e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsprintf.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[99]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[c4]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[95]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[9d]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[c5]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[97]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9f]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[89]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[c0]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[18d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[18e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[18f]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d0]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[d1]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a1]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a3]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[d2]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a5]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[a7]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[c2]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[190]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d3]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[a9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[cf]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c9]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b7]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[149]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[ca]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[d7]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[d9]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[da]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[cb]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cc]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[db]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[dc]"></a>BuzzleInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.BuzzleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BuzzleInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>CrossRoadAction</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, crossrode.o(i.CrossRoadAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CrossRoadAction
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Summarycontrol
</UL>

<P><STRONG><a name="[13]"></a>DMA0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(i.DMA0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;row_finished
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>DirectionControlProc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, directioncontrol.o(i.DirectionControlProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DirectionControlProc &rArr; DirectionErrorGet &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerActuatorOut
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionErrorGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlPID
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImgProc
</UL>

<P><STRONG><a name="[12c]"></a>Disable_Wdog</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_mk60.o(i.Disable_Wdog))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
</UL>

<P><STRONG><a name="[f0]"></a>EncoderClear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, encoder.o(i.EncoderClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EncoderClear
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_pulse_clean
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_quad_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderGet
</UL>

<P><STRONG><a name="[f3]"></a>EncoderGet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, encoder.o(i.EncoderGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EncoderGet &rArr; gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_pulse_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_quad_get
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderClear
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProc
</UL>

<P><STRONG><a name="[f7]"></a>EncoderInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, encoder.o(i.EncoderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EncoderInit &rArr; lptmr_pulse_init &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_pulse_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_ddr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_quad_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>FTM_port_mux</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, mk60_ftm.o(i.FTM_port_mux))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FTM_port_mux &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_pwm_init
</UL>

<P><STRONG><a name="[fd]"></a>ImgProc</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rodeview.o(i.ImgProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ImgProc &rArr; Summarycontrol &rArr; get_rode_type &rArr; IslandfristEntrancejudge &rArr; IslandfristEntranceRec &rArr; OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Summarycontrol
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedTargetSet
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightBorderSearchFrom
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiddleLineUpdate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftBorderSearchFrom
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlProc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>InRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(i.InRange))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhichCurve
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStraightLine
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStartLine
</UL>

<P><STRONG><a name="[13e]"></a>IsCrossRoad</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, crossrode.o(i.IsCrossRoad))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rode_type
</UL>

<P><STRONG><a name="[13d]"></a>IsOutOfRoad</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, common_type.o(i.IsOutOfRoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsOutOfRoad
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rode_type
</UL>

<P><STRONG><a name="[103]"></a>IsStartLine</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, common_type.o(i.IsStartLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsStartLine
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InRange
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rode_type
</UL>

<P><STRONG><a name="[105]"></a>IsStraightLine</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, common_type.o(i.IsStraightLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsStraightLine
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InRange
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rode_type
</UL>

<P><STRONG><a name="[106]"></a>IslandActionGomiddle</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, island.o(i.IslandActionGomiddle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IslandActionGomiddle &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceProc
</UL>

<P><STRONG><a name="[109]"></a>IslandExitProc</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, island.o(i.IslandExitProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = IslandExitProc &rArr; OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Summarycontrol
</UL>

<P><STRONG><a name="[10b]"></a>IslandExitRec</STRONG> (Thumb, 762 bytes, Stack size 8 bytes, island.o(i.IslandExitRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = IslandExitRec &rArr; OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandExitjudge
</UL>

<P><STRONG><a name="[10c]"></a>IslandExitjudge</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, island.o(i.IslandExitjudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = IslandExitjudge &rArr; IslandExitRec &rArr; OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandExitRec
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rode_type
</UL>

<P><STRONG><a name="[10d]"></a>IslandfristEntranceProc</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, island.o(i.IslandfristEntranceProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IslandfristEntranceProc &rArr; IslandActionGomiddle &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandActionGomiddle
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandsecondEntrancejudge
</UL>

<P><STRONG><a name="[10e]"></a>IslandfristEntranceRec</STRONG> (Thumb, 1758 bytes, Stack size 16 bytes, island.o(i.IslandfristEntranceRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = IslandfristEntranceRec &rArr; OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDPrintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Slope_Figure
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Slope_Figure
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntrancejudge
</UL>

<P><STRONG><a name="[113]"></a>IslandfristEntrancejudge</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, island.o(i.IslandfristEntrancejudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = IslandfristEntrancejudge &rArr; IslandfristEntranceRec &rArr; OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceRec
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rode_type
</UL>

<P><STRONG><a name="[132]"></a>IslandsecondEntranceProc</STRONG> (Thumb, 316 bytes, Stack size 0 bytes, island.o(i.IslandsecondEntranceProc))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Summarycontrol
</UL>

<P><STRONG><a name="[115]"></a>IslandsecondEntranceRec</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, island.o(i.IslandsecondEntranceRec))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandsecondEntrancejudge
</UL>

<P><STRONG><a name="[114]"></a>IslandsecondEntrancejudge</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, island.o(i.IslandsecondEntrancejudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IslandsecondEntrancejudge &rArr; IslandfristEntranceProc &rArr; IslandActionGomiddle &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandsecondEntranceRec
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceProc
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rode_type
</UL>

<P><STRONG><a name="[112]"></a>L_Slope_Figure</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, island.o(i.L_Slope_Figure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = L_Slope_Figure &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceRec
</UL>

<P><STRONG><a name="[fe]"></a>LeftBorderSearchFrom</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bordersearch.o(i.LeftBorderSearchFrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LeftBorderSearchFrom
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImgProc
</UL>

<P><STRONG><a name="[144]"></a>Limit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, isr.o(i.Limit))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_change
</UL>

<P><STRONG><a name="[e5]"></a>Limit_f</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, isr.o(i.Limit_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Limit_f &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlPID
</UL>

<P><STRONG><a name="[11a]"></a>MainProc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, encoder.o(i.MainProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MainProc &rArr; SpeedControlProc &rArr; SpeedControlPID &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distancecontrol
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderGet
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderClear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlProc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT0_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>MiddleLineUpdate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bordersearch.o(i.MiddleLineUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImgProc
</UL>

<P><STRONG><a name="[e4]"></a>Min_f</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, isr.o(i.Min_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Min_f
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlPID
</UL>

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mk60.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>OLEDPrintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, seekfree_oled.o(i.OLEDPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Summarycontrol
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceRec
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandExitRec
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandExitProc
</UL>

<P><STRONG><a name="[123]"></a>OLED_DLY_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, seekfree_oled.o(i.OLED_DLY_ms))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[11e]"></a>OLED_Fill</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, seekfree_oled.o(i.OLED_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_Fill &rArr; OLED_WrDat &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[121]"></a>OLED_Init</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, seekfree_oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Init &rArr; OLED_Fill &rArr; OLED_WrDat &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init_NoAlt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DLY_ms
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>OLED_P6x8Str</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, seekfree_oled.o(i.OLED_P6x8Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OLED_P6x8Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDPrintf
</UL>

<P><STRONG><a name="[124]"></a>OLED_Set_Pos</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, seekfree_oled.o(i.OLED_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[11f]"></a>OLED_WrCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, seekfree_oled.o(i.OLED_WrCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[120]"></a>OLED_WrDat</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, seekfree_oled.o(i.OLED_WrDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_WrDat &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>

<P><STRONG><a name="[57]"></a>PIT0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(i.PIT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PIT0_IRQHandler &rArr; MainProc &rArr; SpeedControlProc &rArr; SpeedControlPID &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>PORTA_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isr.o(i.PORTA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>PORTC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr.o(i.PORTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORTC_IRQHandler &rArr; VSYNC
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>R_Slope_Figure</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, island.o(i.R_Slope_Figure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = R_Slope_Figure &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceRec
</UL>

<P><STRONG><a name="[ff]"></a>RightBorderSearchFrom</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bordersearch.o(i.RightBorderSearchFrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RightBorderSearchFrom
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImgProc
</UL>

<P><STRONG><a name="[126]"></a>SYSTEM_CLK</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, system_mk60.o(i.SYSTEM_CLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTEM_CLK
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
</UL>

<P><STRONG><a name="[11c]"></a>SpeedControlProc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, speedcontrol.o(i.SpeedControlProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SpeedControlProc &rArr; SpeedControlPID &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_change
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlPID
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProc
</UL>

<P><STRONG><a name="[102]"></a>SpeedTargetSet</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, speedcontrol.o(i.SpeedTargetSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SpeedTargetSet &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImgProc
</UL>

<P><STRONG><a name="[7c]"></a>Start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system_mk60.o(i.Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Start &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLK
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Wdog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>SteerActuatorInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, steeractuator.o(i.SteerActuatorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SteerActuatorInit &rArr; ftm_pwm_init &rArr; FTM_port_mux &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>SteerActuatorOut</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, steeractuator.o(i.SteerActuatorOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SteerActuatorOut &rArr; ftm_pwm_duty
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_pwm_duty
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlProc
</UL>

<P><STRONG><a name="[101]"></a>Summarycontrol</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, rode_mix.o(i.Summarycontrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Summarycontrol &rArr; get_rode_type &rArr; IslandfristEntrancejudge &rArr; IslandfristEntranceRec &rArr; OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDPrintf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossRoadAction
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandsecondEntranceProc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandExitProc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rode_type
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImgProc
</UL>

<P><STRONG><a name="[48]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isr.o(i.UART4_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_RX_TX_IRQHandler &rArr; mt9v032_cof_uart_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v032_cof_uart_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[125]"></a>VSYNC</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, seekfree_mt9v032.o(i.VSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VSYNC
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>WhichCurve</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, cuver.o(i.WhichCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WhichCurve
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InRange
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rode_type
</UL>

<P><STRONG><a name="[ce]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c6]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[143]"></a>binaryzation</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, imageprocess.o(i.binaryzation))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = binaryzation
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>camera_init</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, seekfree_mt9v032.o(i.camera_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = camera_init &rArr; dma_portx2buff_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq_en
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_portx2buff_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>distancecontrol</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, encoder.o(i.distancecontrol))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainProc
</UL>

<P><STRONG><a name="[127]"></a>div_set</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_mk60.o(i.div_set))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLK
</UL>

<P><STRONG><a name="[13b]"></a>dma_portx2buff_init</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, mk60_dma.o(i.dma_portx2buff_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dma_portx2buff_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[12f]"></a>ftm_pwm_duty</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, mk60_ftm.o(i.ftm_pwm_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ftm_pwm_duty
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerActuatorOut
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_change
</UL>

<P><STRONG><a name="[12e]"></a>ftm_pwm_init</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, mk60_ftm.o(i.ftm_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ftm_pwm_init &rArr; FTM_port_mux &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_port_mux
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerActuatorInit
</UL>

<P><STRONG><a name="[f1]"></a>ftm_quad_clean</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mk60_ftm.o(i.ftm_quad_clean))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderClear
</UL>

<P><STRONG><a name="[f4]"></a>ftm_quad_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mk60_ftm.o(i.ftm_quad_get))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderGet
</UL>

<P><STRONG><a name="[f8]"></a>ftm_quad_init</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, mk60_ftm.o(i.ftm_quad_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ftm_quad_init &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInit
</UL>

<P><STRONG><a name="[13f]"></a>get_clk</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, common.o(i.get_clk))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>get_config</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, seekfree_mt9v032.o(i.get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_config &rArr; uart_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[130]"></a>get_rode_type</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, rode_mix.o(i.get_rode_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = get_rode_type &rArr; IslandfristEntrancejudge &rArr; IslandfristEntranceRec &rArr; OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhichCurve
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossRoad
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStraightLine
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStartLine
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOutOfRoad
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandsecondEntrancejudge
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntrancejudge
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandExitjudge
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Summarycontrol
</UL>

<P><STRONG><a name="[fa]"></a>gpio_ddr</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, mk60_gpio.o(i.gpio_ddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_ddr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInit
</UL>

<P><STRONG><a name="[f5]"></a>gpio_get</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, mk60_gpio.o(i.gpio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderGet
</UL>

<P><STRONG><a name="[dd]"></a>gpio_init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, mk60_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_portx2buff_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzleInit
</UL>

<P><STRONG><a name="[de]"></a>gpio_set</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, mk60_gpio.o(i.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzleInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Summarycontrol
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceRec
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceProc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandExitRec
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandsecondEntrancejudge
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandExitjudge
</UL>

<P><STRONG><a name="[f2]"></a>lptmr_pulse_clean</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mk60_lptmr.o(i.lptmr_pulse_clean))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderClear
</UL>

<P><STRONG><a name="[f6]"></a>lptmr_pulse_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mk60_lptmr.o(i.lptmr_pulse_get))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderGet
</UL>

<P><STRONG><a name="[f9]"></a>lptmr_pulse_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mk60_lptmr.o(i.lptmr_pulse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lptmr_pulse_init &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInit
</UL>

<P><STRONG><a name="[b2]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; ImgProc &rArr; Summarycontrol &rArr; get_rode_type &rArr; IslandfristEntrancejudge &rArr; IslandfristEntranceRec &rArr; OLEDPrintf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_clk
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paraminit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binaryzation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SteerActuatorInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImgProc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12a]"></a>motor_change</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, motor.o(i.motor_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = motor_change &rArr; ftm_pwm_duty
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_pwm_duty
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlProc
</UL>

<P><STRONG><a name="[140]"></a>motor_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, motor.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = motor_init &rArr; ftm_pwm_init &rArr; FTM_port_mux &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>mt9v032_cof_uart_interrupt</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, seekfree_mt9v032.o(i.mt9v032_cof_uart_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mt9v032_cof_uart_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>paraminit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, param.o(i.paraminit))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>pit_init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, mk60_pit.o(i.pit_init))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>port_init</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, mk60_port.o(i.port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_pulse_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_quad_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_port_mux
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_portx2buff_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[122]"></a>port_init_NoAlt</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mk60_port.o(i.port_init_NoAlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_init_NoAlt
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[df]"></a>row_finished</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, seekfree_mt9v032.o(i.row_finished))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>systick_delay</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mk60_systick.o(i.systick_delay))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>

<P><STRONG><a name="[138]"></a>systick_delay_ms</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, mk60_systick.o(i.systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = systick_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[145]"></a>uart_getchar</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mk60_uart.o(i.uart_getchar))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v032_cof_uart_interrupt
</UL>

<P><STRONG><a name="[136]"></a>uart_init</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, mk60_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart_init &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>uart_putbuff</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, mk60_uart.o(i.uart_putbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_putbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[147]"></a>uart_putchar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mk60_uart.o(i.uart_putchar))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>

<P><STRONG><a name="[137]"></a>uart_rx_irq_en</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mk60_uart.o(i.uart_rx_irq_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_rx_irq_en
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[ac]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[80]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Slope_Figure
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Slope_Figure
</UL>

<P><STRONG><a name="[14a]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlPID
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlPID
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedTargetSet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandActionGomiddle
</UL>

<P><STRONG><a name="[14d]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[153]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Slope_Figure
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Slope_Figure
</UL>

<P><STRONG><a name="[150]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionErrorGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlPID
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlPID
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedTargetSet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandActionGomiddle
</UL>

<P><STRONG><a name="[151]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlPID
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedTargetSet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Slope_Figure
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Slope_Figure
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandActionGomiddle
</UL>

<P><STRONG><a name="[193]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedTargetSet
</UL>

<P><STRONG><a name="[194]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[110]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceRec
</UL>

<P><STRONG><a name="[152]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[156]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionErrorGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlPID
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlPID
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedTargetSet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandActionGomiddle
</UL>

<P><STRONG><a name="[154]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[14c]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[14f]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlPID
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceRec
</UL>

<P><STRONG><a name="[155]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedTargetSet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandActionGomiddle
</UL>

<P><STRONG><a name="[157]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionErrorGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlPID
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedTargetSet
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IslandfristEntranceRec
</UL>

<P><STRONG><a name="[159]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionErrorGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlPID
</UL>

<P><STRONG><a name="[15b]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[160]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionErrorGet
</UL>

<P><STRONG><a name="[15d]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionErrorGet
</UL>

<P><STRONG><a name="[15e]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionErrorGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlPID
</UL>

<P><STRONG><a name="[195]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_f
</UL>

<P><STRONG><a name="[15f]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[163]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlPID
</UL>

<P><STRONG><a name="[161]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[15a]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[14b]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Min_f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_f
</UL>

<P><STRONG><a name="[162]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionErrorGet
</UL>

<P><STRONG><a name="[164]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[8b]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[8f]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[148]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mk60_uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq_en
</UL>

<P><STRONG><a name="[13c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, seekfree_mt9v032.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_init
</UL>

<P><STRONG><a name="[129]"></a>SpeedControlFilter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speedcontrol.o(i.SpeedControlFilter))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlProc
</UL>

<P><STRONG><a name="[128]"></a>SpeedControlPID</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, speedcontrol.o(i.SpeedControlPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SpeedControlPID &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedControlProc
</UL>

<P><STRONG><a name="[e0]"></a>DirectionControlPID</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, directioncontrol.o(i.DirectionControlPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DirectionControlPID &rArr; Limit_f &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Min_f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_f
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlProc
</UL>

<P><STRONG><a name="[eb]"></a>DirectionErrorGet</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, directioncontrol.o(i.DirectionErrorGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DirectionErrorGet &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionControlProc
</UL>

<P><STRONG><a name="[158]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[14e]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[165]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[15c]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[7f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
